{
  "openapi": "3.0.3",
  "info": {
    "title": "CodeLand.io Backend API",
    "description": "API for user management, authentication, exercises, and scoring system",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@CodeLand.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5001",
      "description": "Development server"
    },
    {
      "url": "https://api.codeland.io",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "users",
      "description": "User management operations"
    },
    {
      "name": "exercises",
      "description": "Exercise management operations"
    },
    {
      "name": "scores",
      "description": "Score management operations"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register a new user",
        "description": "Create a new user account with username, email, and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              },
              "example": {
                "username": "johndoe",
                "email": "john@example.com",
                "password": "securepassword123"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                },
                "example": {
                  "status": "success",
                  "message": "Successfully registered.",
                  "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login user",
        "description": "Authenticate user with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "john@example.com",
                "password": "securepassword123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or inactive account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["auth"],
        "summary": "Logout user",
        "description": "Logout the authenticated user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/status": {
      "get": {
        "tags": ["auth"],
        "summary": "Get user status",
        "description": "Get current authenticated user information",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or inactive account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/ping": {
      "get": {
        "tags": ["users"],
        "summary": "Ping users service",
        "description": "Health check for users service",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "pong!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all users",
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Add new user (Admin only)",
        "description": "Create a new user (requires admin privileges)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/ping": {
      "get": {
        "tags": ["exercises"],
        "summary": "Ping exercises service",
        "description": "Health check for exercises service",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "pong!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exercises": {
      "get": {
        "tags": ["exercises"],
        "summary": "Get all exercises",
        "description": "Retrieve a list of all exercises",
        "responses": {
          "200": {
            "description": "Exercises retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "exercises": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Exercise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["exercises"],
        "summary": "Add new exercise (Admin only)",
        "description": "Create a new exercise (requires admin privileges)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseCreate"
              },
              "example": {
                "title": "Sum Function",
                "body": "Define a function called sum that takes two integers as arguments and returns their sum.",
                "difficulty": 0,
                "test_cases": ["sum(2, 3)", "sum(5, 7)"],
                "solutions": ["5", "12"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exercise created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/{exercise_id}": {
      "get": {
        "tags": ["exercises"],
        "summary": "Get exercise by ID",
        "description": "Retrieve a specific exercise by its ID",
        "parameters": [
          {
            "name": "exercise_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Exercise ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Exercise retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Exercise"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Exercise not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["exercises"],
        "summary": "Update exercise (Admin only)",
        "description": "Update an existing exercise (requires admin privileges)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "exercise_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Exercise ID"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated Sum Function"
                  },
                  "body": {
                    "type": "string",
                    "example": "Updated description."
                  },
                  "difficulty": {
                    "type": "integer",
                    "example": 1
                  },
                  "test_cases": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["sum(2, 3)", "sum(5, 7)", "sum(1, 1)"]
                  },
                  "solutions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["5", "12", "2"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exercise updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or insufficient privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Exercise not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exercises/validate_code": {
      "post": {
        "tags": ["exercises"],
        "summary": "Validate user code",
        "description": "Validate user's code against an exercise's test cases",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "answer": {
                    "type": "string",
                    "example": "def sum(a, b):\n    return a + b"
                  },
                  "exercise_id": {
                    "type": "integer",
                    "example": 1
                  }
                },
                "required": ["answer", "exercise_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "boolean"
                      },
                      "example": [true, true]
                    },
                    "user_results": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["5", "12"]
                    },
                    "all_correct": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data or compilation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Exercise not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Execution error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scores/ping": {
      "get": {
        "tags": ["scores"],
        "summary": "Ping scores service",
        "description": "Health check for scores service",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "pong!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scores": {
      "get": {
        "tags": ["scores"],
        "summary": "Get all scores",
        "description": "Retrieve a list of all scores",
        "responses": {
          "200": {
            "description": "Scores retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "scores": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Score"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["scores"],
        "summary": "Add new score",
        "description": "Create a new score for an exercise",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScoreCreate"
              },
              "example": {
                "exercise_id": 1,
                "answer": "def sum(a, b):\n    return a + b",
                "results": [true, true],
                "user_results": ["5", "12"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Score created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scores/user": {
      "get": {
        "tags": ["scores"],
        "summary": "Get user's scores",
        "description": "Retrieve all scores for the authenticated user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User scores retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "scores": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Score"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scores/user/{score_id}": {
      "get": {
        "tags": ["scores"],
        "summary": "Get user's specific score",
        "description": "Retrieve a specific score for the authenticated user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "score_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Score ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Score retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Score"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Score not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scores/{exercise_id}": {
      "put": {
        "tags": ["scores"],
        "summary": "Update score",
        "description": "Update a score for a specific exercise",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "exercise_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Exercise ID"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "answer": {
                    "type": "string",
                    "example": "def sum(a, b):\n    return a + b"
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "type": "boolean"
                    },
                    "example": [true, true]
                  },
                  "user_results": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["5", "12"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Score updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload or score does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login or registration"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "admin": {
            "type": "boolean",
            "example": false
          }
        },
        "required": ["id", "username", "email", "active", "admin"]
      },
      "UserRegistration": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128,
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "securepassword123"
          }
        },
        "required": ["username", "email", "password"]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "securepassword123"
          }
        },
        "required": ["email", "password"]
      },
      "Exercise": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Sum Function"
          },
          "body": {
            "type": "string",
            "example": "Define a function called sum that takes two integers as arguments and returns their sum."
          },
          "difficulty": {
            "type": "integer",
            "example": 0,
            "description": "0: easy, 1: medium, 2: hard"
          },
          "test_cases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["sum(2, 3)", "sum(5, 7)"]
          },
          "solutions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["5", "12"]
          }
        },
        "required": ["id", "title", "body", "difficulty", "test_cases", "solutions"]
      },
      "ExerciseCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Sum Function"
          },
          "body": {
            "type": "string",
            "example": "Define a function called sum that takes two integers as arguments and returns their sum."
          },
          "difficulty": {
            "type": "integer",
            "example": 0,
            "description": "0: easy, 1: medium, 2: hard"
          },
          "test_cases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["sum(2, 3)", "sum(5, 7)"]
          },
          "solutions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["5", "12"]
          }
        },
        "required": ["title", "body", "difficulty", "test_cases", "solutions"]
      },
      "Score": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "exercise_id": {
            "type": "integer",
            "example": 1
          },
          "answer": {
            "type": "string",
            "nullable": true,
            "example": "def sum(a, b):\n    return a + b"
          },
          "results": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "boolean"
            },
            "example": [true, true]
          },
          "user_results": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": ["5", "12"]
          }
        },
        "required": ["id", "user_id", "exercise_id"]
      },
      "ScoreCreate": {
        "type": "object",
        "properties": {
          "exercise_id": {
            "type": "integer",
            "example": 1
          },
          "answer": {
            "type": "string",
            "nullable": true,
            "example": "def sum(a, b):\n    return a + b"
          },
          "results": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "boolean"
            },
            "example": [true, true]
          },
          "user_results": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": ["5", "12"]
          }
        },
        "required": ["exercise_id"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Successfully registered."
          },
          "auth_token": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          }
        },
        "required": ["status", "message", "auth_token"]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        },
        "required": ["status", "message"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["fail", "error"],
            "example": "fail"
          },
          "message": {
            "type": "string",
            "example": "Invalid payload."
          }
        },
        "required": ["status", "message"]
      }
    }
  }
}